# from hungarian_algorithm import algorithm
# from data1 import G1
# from data2 import G2


# total_kymatio = algorithm.find_matching(G2, matching_type = 'min', return_type = 'total')
# print("G2 total: {}".format(total_kymatio))
# total_random = algorithm.find_matching(G1, matching_type = 'max', return_type = 'total')
# print("G1 total: {}".format(total_random))

import numpy as np
from scipy.optimize import linear_sum_assignment

cost = np.array([[4.304144 , 4.696843 , 5.0895424, 5.482241 , 5.874941 , 6.2676396,
        6.660339 , 6.735039 , 3.2175722, 3.6102712, 4.00297  , 4.3956695,
        4.788369 , 5.1810675, 5.5737667, 5.648467 ],
       [6.933161 , 6.6849484, 6.2922497, 5.8995504, 5.506851 , 5.1141524,
        4.721453 , 4.328754 , 5.800891 , 5.552679 , 5.15998  , 4.7672806,
        4.3745813, 3.9818828, 3.5891836, 3.1964843],
       [6.6671267, 6.2744274, 5.881728 , 5.489029 , 5.0963297, 4.7036314,
        4.310932 , 3.9182327, 5.608584 , 5.2158847, 4.823186 , 4.4304867,
        4.0377874, 3.6450887, 3.2523894, 2.8596902],
       [5.713827 , 6.1065264, 6.416907 , 6.0242076, 5.6315084, 5.2388096,
        4.8461103, 4.453411 , 4.5001965, 4.8928957, 5.2032766, 4.8105774,
        4.417878 , 4.025179 , 3.63248  , 3.2397807],
       [7.001742 , 6.6090426, 6.216344 , 5.8236446, 5.4309454, 5.0382466,
        4.6455474, 4.252848 , 5.960058 , 5.567359 , 5.1746597, 4.7819605,
        4.3892612, 3.9965627, 3.6038635, 3.2111642],
       [5.359872 , 4.9671726, 4.574474 , 4.1817746, 3.7890754, 4.023757 ,
        4.416456 , 4.8091555, 4.2736464, 3.880947 , 3.4882483, 3.095549 ,
        2.7028499, 2.9375315, 3.3302307, 3.72293  ],
       [5.0293508, 5.4220495, 5.814749 , 6.207448 , 6.600147 , 6.9928455,
        7.385545 , 7.226207 , 3.9996176, 4.392317 , 4.7850156, 5.177715 ,
        5.5704136, 5.9631124, 6.3558116, 6.1964736],
       [3.2557712, 2.8630722, 2.4703732, 2.5469708, 2.9396698, 3.3323686,
        3.7250679, 4.1177673, 2.0368338, 1.6441345, 1.2514355, 1.3280331,
        1.7207322, 2.113431 , 2.5061302, 2.8988295],
       [5.6134562, 6.006155 , 6.3988543, 6.2039385, 5.8112392, 5.4185405,
        5.025841 , 4.633142 , 4.4598703, 4.8525696, 5.245269 , 5.0503526,
        4.6576533, 4.2649546, 3.8722553, 3.479556 ],
       [4.1607356, 3.7680364, 3.9617198, 4.3544188, 4.747118 , 5.1398168,
        5.532516 , 5.9252152, 3.0140426, 2.6213436, 2.8150268, 3.2077258,
        3.600425 , 3.9931238, 4.3858232, 4.7785225],
       [7.1441135, 7.536813 , 7.2137356, 6.8210363, 6.428337 , 6.035638 ,
        5.6429386, 5.2502394, 6.1233444, 6.5160437, 6.192966 , 5.8002667,
        5.4075675, 5.0148687, 4.6221695, 4.2294703],
       [4.2530727, 3.8603733, 3.4676745, 3.0749753, 2.682276 , 2.981053 ,
        3.3737524, 3.7664516, 3.1128545, 2.7201552, 2.3274565, 1.9347571,
        1.5420579, 1.840835 , 2.2335343, 2.6262336],
       [5.8507376, 5.4580383, 5.06534  , 4.672641 , 4.2799416, 3.988087 ,
        4.380786 , 4.773485 , 4.793334 , 4.400635 , 4.0079355, 3.6152365,
        3.2225373, 2.930683 , 3.3233821, 3.7160814],
       [4.7868342, 4.6250563, 5.0177555, 5.4104548, 5.803154 , 6.1958528,
        6.588552 , 6.9812512, 3.7998362, 3.6380584, 4.0307574, 4.4234567,
        4.816156 , 5.2088547, 5.601554 , 5.994253 ],
       [3.307012 , 3.699711 , 4.09241  , 4.4851093, 4.8778086, 5.270507 ,
        5.663206 , 5.391482 , 2.2053103, 2.598009 , 2.9907084, 3.3834076,
        3.7761064, 4.168805 , 4.5615044, 4.28978  ],
       [4.878633 , 4.4859343, 4.643712 , 5.0364113, 5.4291105, 5.8218093,
        6.2145085, 6.607208 , 3.756719 , 3.36402  , 3.5217981, 3.9144974,
        4.3071966, 4.6998954, 5.0925946, 5.485294 ]])


row_ind, col_ind = linear_sum_assignment(cost)
print(cost[row_ind, col_ind].sum())